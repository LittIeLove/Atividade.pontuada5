import os  # Biblioteca para interagir com o sistema operacional
from time import sleep  # Fun√ß√£o para pausar a execu√ß√£o (usada ao sair)

# Nome do arquivo onde os dados das contas s√£o armazenados
ARQUIVO_CONTAS = "contas.txt"

# Fun√ß√£o para limpar o terminal (compat√≠vel com Windows e Unix)
def limpar_tela():
    os.system('cls' if os.name == 'nt' else 'clear')

# Fun√ß√£o que carrega as contas do arquivo de texto para uma lista de dicion√°rios
def carregar_contas():
    contas = []
    try:
        with open(ARQUIVO_CONTAS, "r") as arquivo:
            for linha in arquivo:
                nome, cpf, saldo = linha.strip().split(",")  # Divide a linha nos dados
                contas.append({"nome": nome, "cpf": cpf, "saldo": float(saldo)})  # Converte saldo para float
    except FileNotFoundError:
        # Se o arquivo n√£o existir, simplesmente retorna uma lista vazia
        pass
    return contas

# Fun√ß√£o que salva a lista de contas no arquivo de texto
def salvar_contas(contas):
    with open(ARQUIVO_CONTAS, "w") as arquivo:
        for conta in contas:
            # Escreve os dados separados por v√≠rgula, um por linha
            arquivo.write(f"{conta['nome']},{conta['cpf']},{conta['saldo']}\n")

# Fun√ß√£o para criar uma nova conta, verificando se o CPF j√° existe
def criar_conta(nome, cpf, saldo_inicial):
    contas = carregar_contas()
    for conta in contas:
        if conta["cpf"] == cpf:
            print("\n‚ùå J√° existe uma conta com esse CPF.")
            return  # Encerra se o CPF j√° estiver cadastrado
    contas.append({"nome": nome, "cpf": cpf, "saldo": saldo_inicial})
    salvar_contas(contas)
    print(f"\n‚úÖ Conta criada com sucesso para {nome} (CPF: {cpf})!")

# Fun√ß√£o para exibir todas as contas cadastradas
def listar_contas():
    contas = carregar_contas()
    if not contas:
        print("\n‚ö†Ô∏è Nenhuma conta encontrada.")
    else:
        print("\nüìã --- Contas Cadastradas ---")
        for conta in contas:
            print(f"üë§ Titular: {conta['nome']} | CPF: {conta['cpf']} | Saldo: R${conta['saldo']:.2f}")

# Fun√ß√£o para realizar dep√≥sito em uma conta pelo CPF
def depositar(cpf, valor):
    contas = carregar_contas()
    for conta in contas:
        if conta["cpf"] == cpf:
            conta["saldo"] += valor  # Adiciona o valor ao saldo
            salvar_contas(contas)
            print(f"\nüíµ Dep√≥sito de R${valor:.2f} realizado com sucesso para {conta['nome']} (CPF: {cpf}).")
            return
    print("\n‚ùå Conta n√£o encontrada.")  # CPF n√£o localizado

# Fun√ß√£o para realizar saque de uma conta, se houver saldo suficiente
def sacar(cpf, valor):
    contas = carregar_contas()
    for conta in contas:
        if conta["cpf"] == cpf:
            if conta["saldo"] >= valor:
                conta["saldo"] -= valor  # Subtrai o valor do saldo
                salvar_contas(contas)
                print(f"\nüí∏ Saque de R${valor:.2f} realizado com sucesso para {conta['nome']} (CPF: {cpf}).")
            else:
                print("\n‚ùå Saldo insuficiente.")  # Verifica saldo antes de sacar
            return
    print("\n‚ùå Conta n√£o encontrada.")  # CPF n√£o localizado

# Fun√ß√£o principal com o menu de opera√ß√µes do sistema banc√°rio
def menu():
    while True:
        limpar_tela()
        print("‚ïê" * 30)
        print("üè¶  SISTEMA BANC√ÅRIO PYTHON  ")
        print("‚ïê" * 30)
        print("1Ô∏è‚É£  Criar conta")
        print("2Ô∏è‚É£  Listar contas")
        print("3Ô∏è‚É£  Depositar")
        print("4Ô∏è‚É£  Sacar")
        print("5Ô∏è‚É£  Sair")
        print("‚ïê" * 30)
        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == "1":
            try:
                nome = input("\nDigite o nome do titular: ")
                cpf = input("Digite o CPF (apenas n√∫meros): ")
                saldo = float(input("Digite o saldo inicial: "))
                criar_conta(nome, cpf, saldo)
            except ValueError:
                print("\n‚ùå Valor inv√°lido. Tente novamente.")  # Captura erro ao converter saldo

        elif opcao == "2":
            listar_contas()

        elif opcao == "3":
            cpf = input("\nDigite o CPF da conta para dep√≥sito: ")
            contas = carregar_contas()
            conta = next((c for c in contas if c["cpf"] == cpf), None)  # Busca conta pelo CPF
            if not conta:
                print("\n‚ùå Conta n√£o encontrada.")
            else:
                try:
                    valor = float(input("Valor do dep√≥sito: "))
                    depositar(cpf, valor)
                except ValueError:
                    print("\n‚ùå Valor inv√°lido. Tente novamente.")  # Captura erro na convers√£o do valor

        elif opcao == "4":
            cpf = input("\nDigite o CPF da conta para saque: ")
            contas = carregar_contas()
            conta = next((c for c in contas if c["cpf"] == cpf), None)
            if not conta:
                print("\n‚ùå Conta n√£o encontrada.")
            else:
                try:
                    valor = float(input("Valor do saque: "))
                    sacar(cpf, valor)
                except ValueError:
                    print("\n‚ùå Valor inv√°lido. Tente novamente.")

        elif opcao == "5":
            print("\nüëã Encerrando o sistema... At√© logo!")
            sleep(1.5)  # Pausa de 1.5 segundos antes de encerrar
            break  # Encerra o loop

        else:
            print("\n‚ùå Op√ß√£o inv√°lida. Tente novamente.")  # Op√ß√£o fora das permitidas

        input("\nPressione Enter para continuar...")  # Pausa para leitura do usu√°rio

# In√≠cio do programa
menu()
